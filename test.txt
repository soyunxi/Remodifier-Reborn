以下是针对 Minecraft 1.20.1 Forge 47.3.0+ 的网络模块改造方案（基于引用材料 [4][5] 的版本要求）：

---

### **1. NetworkHandler.java (Forge 适配)**
```java
package com.teampotato.modifiers.common.network;

import com.teampotato.modifiers.ModifiersMod;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.util.thread.BlockableEventLoop;
import net.minecraftforge.network.NetworkDirection;
import net.minecraftforge.network.NetworkEvent;
import net.minecraftforge.network.NetworkRegistry;
import net.minecraftforge.network.simple.SimpleChannel;

import java.util.function.BiConsumer;
import java.util.function.Supplier;

public class NetworkHandler {
    private static final String PROTOCOL_VERSION = "1";
    public static final SimpleChannel CHANNEL = NetworkRegistry.newSimpleChannel(
        new ResourceLocation(ModifiersMod.MOD_ID, "main"),
        () -> PROTOCOL_VERSION,
        PROTOCOL_VERSION::equals,
        PROTOCOL_VERSION::equals
    );

    public static void register() {
        int packetId = 0;
        CHANNEL.registerMessage(packetId++,
            PacketC2SReforge.class,
            PacketC2SReforge::encode,
            PacketC2SReforge::new,
            NetworkHandler::handleReforgePacket,
            Optional.of(NetworkDirection.PLAY_TO_SERVER)
        );
    }

    private static void handleReforgePacket(PacketC2SReforge packet, Supplier<NetworkEvent.Context> ctx) {
        ctx.get().enqueueWork(() -> {
            ServerPlayer player = ctx.get().getSender();
            if (player != null && player.containerMenu instanceof SmithingScreenHandlerReforge handler) {
                handler.modifiers$tryReforge();
            }
        });
        ctx.get().setPacketHandled(true);
    }

    public static void sendToServer(Object packet) {
        CHANNEL.sendToServer(packet);
    }

    public static void sendTo(Object packet, ServerPlayer player) {
        CHANNEL.send(PacketDistributor.PLAYER.with(() -> player), packet);
    }
}
```

---

### **2. 删除 NetworkHandlerForge.java 和 NetworkHandlerProxy.java**
> Forge 使用直接通道管理，无需代理模式 [3]

---

### **3. PacketC2SReforge.java (Forge 适配)**
```java
package com.teampotato.modifiers.common.network;

import net.minecraft.network.FriendlyByteBuf;
import net.minecraftforge.network.NetworkEvent;

import java.util.function.Supplier;

public class PacketC2SReforge {
    public PacketC2SReforge() {}  // 空构造器必须保留

    public PacketC2SReforge(FriendlyByteBuf buf) {}  // Forge 使用 FriendlyByteBuf [4]

    public void encode(FriendlyByteBuf buf) {}      // 实现编解码方法

    public static void handle(PacketC2SReforge packet, Supplier<NetworkEvent.Context> ctx) {
        // 处理逻辑已迁移到 NetworkHandler
    }
}
```

---

### **关键改造点说明：**
1. **网络协议配置**
   - 使用 `NetworkRegistry.newSimpleChannel` 创建频道 [3][4]
   - 采用版本校验机制 `PROTOCOL_VERSION` 确保兼容性 [4]

2. **数据包注册**
   - 使用递增式 packetId 注册消息（Forge 要求唯一标识符）[4]
   - 明确指定 `NetworkDirection.PLAY_TO_SERVER` 方向 [3]

3. **线程安全处理**
   - 通过 `ctx.get().enqueueWork()` 确保主线程操作 [4]
   - 使用 `ctx.get().getSender()` 获取服务端玩家对象

4. **依赖调整**
   - 移除 Fabric 特定类 `PacketByteBuf`，改用 `FriendlyByteBuf` [4]
   - 删除冗余的代理接口，简化网络架构 [3]

---

### **初始化配置要求（引用材料 [1][4]）**
1. **开发环境**
   ```gradle
   // build.gradle 配置示例
   minecraft {
       mappings channel: 'official', version: '1.20.1'
       runs {
           client {
               javaLauncher = javaToolchains.launcherFor {
                   languageVersion = JavaLanguageVersion.of(17)
               }
           }
       }
   }

   dependencies {
       minecraft 'net.minecraftforge:forge:1.20.1-47.3.0'
   }
   ```

2. **主类初始化**
   ```java
   // Mod 主类中添加
   public void commonSetup(FMLCommonSetupEvent event) {
       NetworkHandler.register();
   }
   ```

---

### **客户端发送示例**
```java
// 在重铸按钮点击事件中
NetworkHandler.sendToServer(new PacketC2SReforge());
```

该改造方案符合 Forge 1.20.1 的网络架构要求，并参考了官方推荐实践 [3][4]。实际部署时需确保：
1. 使用 Java 17 开发环境 [1]
2. Forge 版本 ≥ 47.3.0 [4][5]
3. 正确实现 `SmithingScreenHandlerReforge` 容器逻辑